---
format:
  revealjs:
    theme: night
    transition: slide
editor: visual
execute:
  echo: true
---

::: {style="text-align: center;"}
# Entrega grupal

**Software para gestión de bases de datos**

[**Autores:** <a href="https://www.linkedin.com/in/almudena-moreno-ribera-5b1389233?lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_contact_details%3BJxW49sp%2BS8WrZmgJWFAGSQ%3D%3D" target="_blank">Almudena Moreno-Ribera</a> y <a href="https://www.linkedin.com/in/pablo-villoslada-blanco-5a4b2316a?lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_contact_details%3B%2BykJQkDhTvqHG%2Bh5Ya24zA%3D%3D" target="_blank">Pablo Villoslada-Blanco</a>]{style="font-size: 20px;"}

<img src="./datos/imagen.png" style="max-width: 33%; height: auto; margin-top: 20px;"/>

[**Máster Universitario en Bioestadística, Universidad Complutense de Madrid (UCM), curso 2023/24**]{style="font-size: 15px;"}

::: {style="position: absolute; bottom: -30px; right: -570px;"}
<a href="https://github.com/pavillos/Entrega_grupal_SPGDBD" target="_blank"> <img src="./datos/github.png" alt="GitHub" style="max-width: 10%;"/> </a>
:::
:::

```{r}
#| echo: false

rm(list = ls()) # Borramos variables de environment
library(tidyverse)
library(ggplot2)
library(lubridate)
library(forcats)
library(glue)
library(sf)
library(patchwork)
library(Metrics)
library(showtext)
library(sysfonts)
```

## Índice

1.  [Objetivo](#objetivo)

2.  [Carga de los datos](#carga)

3.  [Depuración de los datos](#depuracion)

4.  [Preguntas](#preguntas)

------------------------------------------------------------------------

## 1. Objetivo {#objetivo}

El objetivo de la entrega es realizar un análisis de las citas electorales al Congreso de los Diputados de España desde 2008 hasta la actualidad, llevando a cabo la depuración, resúmenes y gráficos oportunos, tanto de sus resultados como del acierto de las encuestas electorales.

------------------------------------------------------------------------

## 2. Carga de los datos {#carga}

```{r}
#| warning: false
#| message: false

datos_elecciones_brutos <- read_csv(file = "./datos/datos_elecciones_brutos.csv")
cod_mun <- read_csv(file = "./datos/cod_mun.csv")
encuestas_brutos <- read_csv(file = "./datos/historical_surveys.csv")
siglas <- read_csv(file = "./datos/siglas.csv")

cod_ccaa_provincias <- tibble::tribble(
  ~CODAUTO,                         ~CCAA, ~CPRO,               ~Provincia,
      "01",                   "Andalucía",  "04",                "Almería",
      "01",                   "Andalucía",  "11",                  "Cádiz",
      "01",                   "Andalucía",  "14",                "Córdoba",
      "01",                   "Andalucía",  "18",                "Granada",
      "01",                   "Andalucía",  "21",                 "Huelva",
      "01",                   "Andalucía",  "23",                   "Jaén",
      "01",                   "Andalucía",  "29",                 "Málaga",
      "01",                   "Andalucía",  "41",                "Sevilla",
      "02",                      "Aragón",  "22",                 "Huesca",
      "02",                      "Aragón",  "44",                 "Teruel",
      "02",                      "Aragón",  "50",               "Zaragoza",
      "03",     "Asturias, Principado de",  "33",               "Asturias",
      "04",              "Balears, Illes",  "07",         "Balears, Illes",
      "05",                    "Canarias",  "35",            "Palmas, Las",
      "05",                    "Canarias",  "38", "Santa Cruz de Tenerife",
      "06",                   "Cantabria",  "39",              "Cantabria",
      "07",             "Castilla y León",  "05",                  "Ávila",
      "07",             "Castilla y León",  "09",                 "Burgos",
      "07",             "Castilla y León",  "24",                   "León",
      "07",             "Castilla y León",  "34",               "Palencia",
      "07",             "Castilla y León",  "37",              "Salamanca",
      "07",             "Castilla y León",  "40",                "Segovia",
      "07",             "Castilla y León",  "42",                  "Soria",
      "07",             "Castilla y León",  "47",             "Valladolid",
      "07",             "Castilla y León",  "49",                 "Zamora",
      "08",          "Castilla-La Mancha",  "02",               "Albacete",
      "08",          "Castilla-La Mancha",  "13",            "Ciudad Real",
      "08",          "Castilla-La Mancha",  "16",                 "Cuenca",
      "08",          "Castilla-La Mancha",  "19",            "Guadalajara",
      "08",          "Castilla-La Mancha",  "45",                 "Toledo",
      "09",                    "Cataluña",  "08",              "Barcelona",
      "09",                    "Cataluña",  "17",                 "Girona",
      "09",                    "Cataluña",  "25",                 "Lleida",
      "09",                    "Cataluña",  "43",              "Tarragona",
      "10",        "Comunitat Valenciana",  "03",       "Alicante/Alacant",
      "10",        "Comunitat Valenciana",  "12",     "Castellón/Castelló",
      "10",        "Comunitat Valenciana",  "46",      "Valencia/València",
      "11",                 "Extremadura",  "06",                "Badajoz",
      "11",                 "Extremadura",  "10",                "Cáceres",
      "12",                     "Galicia",  "15",              "Coruña, A",
      "12",                     "Galicia",  "27",                   "Lugo",
      "12",                     "Galicia",  "32",                "Ourense",
      "12",                     "Galicia",  "36",             "Pontevedra",
      "13",        "Madrid, Comunidad de",  "28",                 "Madrid",
      "14",           "Murcia, Región de",  "30",                 "Murcia",
      "15", "Navarra, Comunidad Foral de",  "31",                "Navarra",
      "16",                  "País Vasco",  "01",            "Araba/Álava",
      "16",                  "País Vasco",  "48",                "Bizkaia",
      "16",                  "País Vasco",  "20",               "Gipuzkoa",
      "17",                   "Rioja, La",  "26",              "Rioja, La",
      "18",                       "Ceuta",  "51",                  "Ceuta",
      "19",                     "Melilla",  "52",                "Melilla"
  )
```

# 3. Depuración de los datos {#depuracion}

------------------------------------------------------------------------

## Índice

3.  [Depuración de los datos](#depuracion)

    3.1. [Eliminar variables que no aportan](#eliminar)

    3.2. [Convertir a tidy data](#tidy)

    3.3. [Añadir siglas](#siglas)

    3.4. [Filtrar los partidos](#filtrarpartidos)

    3.5. [Incluir la fecha de las elecciones y el nombre de los municipios](#incluir)

    3.6. [Filtrar las encuestas de interés](#filtrarencuestas)

## 3.1. Eliminar variables que no aportan {#eliminar}

```{r}
datos_elecciones <- datos_elecciones_brutos |> 
  select(where(~ n_distinct(.) > 1))

encuestas <- encuestas_brutos |> 
  select(where(~ n_distinct(.) > 1))
```

------------------------------------------------------------------------

## 3.2. Convertir a tidy data {#tidy}

```{r}
datos_elecciones_tidy <- datos_elecciones |> 
  pivot_longer(cols = - ("anno":"votos_candidaturas"),
               names_to = "partido",
               values_to = "votos",
               values_drop_na = TRUE)

encuestas_tidy <- encuestas |> 
  pivot_longer(cols = -("date_elec":"turnout"),
               names_to = "siglas", 
               values_to = "intencion_voto",
               values_drop_na = TRUE)
```

------------------------------------------------------------------------

## 3.3. Añadir siglas {#siglas}

Primero, nos quedamos con una única sigla para cada partido.

```{r}
siglas <- siglas |> 
  group_by(denominacion) |> 
  summarise(siglas = first(siglas))
```

Luego, añadimos las siglas.

```{r}
#| warning: false

datos_elecciones_tidy <- datos_elecciones_tidy |> 
  left_join(siglas, by = c("partido" = "denominacion")) |> 
  relocate(siglas, .after = partido)

encuestas_tidy <- encuestas_tidy |> 
  left_join(siglas, by = c("siglas" = "siglas")) |> 
  relocate(siglas, .after = siglas)
```

------------------------------------------------------------------------

## 3.4. Filtrar los partidos {#filtrarpartidos}

Primero, definimos una función para poder agrupar los partidos en función de su denominación y/o sus siglas.

```{r}
agrupar_siglas <- function(siglas, partido){
  siglas_comun <- case_when(
    
    # BLOQUE NACIONALISTA GALEGO (BNG)
    str_detect(str_to_upper(siglas), "BNG|B.N.G.") 
    ~ "BNG",
    
    # CONVERGÈNCIA I UNIÓ (CIU)
    str_detect(str_to_upper(siglas), "CIU") | 
      str_detect(str_to_upper(partido), "CONVERGÈNCIA I UNIÓ")
    ~ "CIU",
    
    # COMPROMÍS
    (str_detect(str_to_upper(siglas), "COMPROMÍS|COMPROMIS|VERDS") | 
     str_detect(str_to_upper(partido), "COMPROMÍS")) & 
     !str_detect(str_to_upper(partido), "MÉS COMPROMÍS")
    ~ "COMPROMIS",
    
    # CIUDADANOS (Cs) (cuidado: tiene/tuvo federaciones - sucursales - con algún otro nombre)
    str_detect(str_to_upper(siglas), "CS") | 
      str_detect(str_to_upper(partido), "CIUDADANOS PARTIDO DE LA|CIUDADANOS,|CIUDADANOS-|CIUTADANS")
    ~ "CS",
    
    # EH - BILDU (son ahora una coalición de partidos formados por Sortu, Eusko Alkartasuna, Aralar, Alternatiba)
    str_detect(str_to_upper(siglas), "EH|AMAIUR|ARALAR") | 
      str_detect(str_to_upper(partido), "EUSKO ALKARTASUNA|EUSKAL HERRIA BILDU|PARTIDO POLITICO ARALAR")
    ~ "EH-BILDU",
    
    # ESQUERRA REPUBLICANA DE CATALUNYA (ERC)
    (str_detect(str_to_upper(siglas), "ERC|ESQUERRA") | 
     str_detect(str_to_upper(partido), "ESQUERRA REPUBLICANA")) & 
      !str_detect(str_to_upper(partido), "PAIS VALENCIA|PAÍS VALENCIÀ")
    ~ "ERC",
    
    # MÁS PAÍS
    str_detect(str_to_upper(siglas), "MÁS PAÍS|MP|M PAÍS") & 
    !str_detect(str_to_upper(partido), "MÉS COMPROMÍS")
    ~ "MÁS PAÍS",
    
    # PARTIDO NACIONALISTA VASCO (PNV)
    str_detect(str_to_upper(siglas), "PNV|P.N.V.") 
    ~ "PNV",
    
    # PARTIDO POPULAR (PP)
    ((str_detect(str_to_upper(siglas), "PP|AP|PDP") | 
     str_detect(str_to_upper(partido), "PARTIDO POPULAR|UNIÓN DEL PUEBLO NAVARRO EN COALICIÓN CON EL PARTI")) & 
      !str_detect(str_to_upper(partido), "ARA,|ANTICAPITALIST|PARTIDO POSITIVISTA CRISTIANO|PLATAFORMA DEL PUEBLO SORIANO"))
    ~ "PP",
    
    # PARTIDO SOCIALISTA OBRERO ESPAÑOL (cuidado: tiene/tuvo federaciones - sucursales - con algún otro nombre)
    str_detect(str_to_upper(siglas), "PSOE|PAD|PSC") | 
     str_detect(str_to_upper(partido), "PARTIDO SOCIALI|PSOE|PARTIT SOCIALISTA OBRER ESPANYOL")
    ~ "PSOE",
    
    # UNIDAS PODEMOS - IU (cuidado que aquí han tenido nombres variados - 
    # IU, los verdes, podem, ezker batua, …- y no siempre han ido juntos, 
    # pero aquí los analizaremos juntos (UP-IU)
    ((str_detect(str_to_upper(siglas), "IU|LV|PODEMOS|UP|VERDES|CANARIAS DE") | 
      str_detect(str_to_upper(partido), "ELS VERDS|PODEM|EN MAREA|EQUO|PODEMOS|ESQUERDA UNIDA|ESQUERRA UNIDA|EZKER BATUA|OS VERDES|IZQUIERDA UNIDA")) & 
       (!str_detect(str_to_upper(siglas), "CUP|EN POSITIU|EL PI|UPYD|RECORTES CERO-GRUPO VERDE|UPD|UPL") |
        !str_detect(str_to_upper(partido), "EN POSITIU|EL PI|MOVIMIENTO POR LA UNIDAD DEL PUEBLO CANARIO|RECORTES CERO|RECORTES CERO-GRUPO VERDE|UNION DEL PUEBLO LEONES|N PROGRESO Y DEMOCRACIA")))
    ~ "UP-IU",
    
    # VOX
    str_detect(str_to_upper(siglas), "VOX") ~ "VOX",
    
    # OTROS
    TRUE ~ "OTROS")
  
  return(siglas_comun)
}
```

------------------------------------------------------------------------

Luego, aplicamos esa función a los datos de los resultados y las encuestas.

```{r}
datos_elecciones_tidy <- datos_elecciones_tidy |>
  mutate(siglas_comun = agrupar_siglas(siglas, partido))

encuestas_tidy <- encuestas_tidy |>
  mutate(siglas_comun = agrupar_siglas(siglas, denominacion))
```

------------------------------------------------------------------------

## 3.5. Incluir la fecha de las elecciones y el nombre de los municipios {#incluir}

```{r}
datos_elecciones_tidy <- datos_elecciones_tidy |> 
  mutate(fecha = glue::glue("{anno}-{mes}"),
         id_mun = glue::glue("{codigo_ccaa}-{codigo_provincia}-{codigo_municipio}")) |>
  left_join(cod_mun, by = c("id_mun" = "cod_mun"))
```

## 3.6. Filtrado de las encuestas de interés {#filtrarencustas}

Descartamos todas aquellas encuestas que hagan referencia a elecciones anteriores a 2008, que sean a pie de urna, que tenga un tamaño muestral inferior a 750 o que sea desconocido, y que tengan menos de 1 o menos días de trabajo de campo.

```{r}
encuestas_tidy <- encuestas_tidy |> 
  drop_na(size) |> 
  mutate(dias_trabajo = field_date_to - field_date_from, .after = field_date_to) |> 
  filter(lubridate::year(date_elec) >= 2008 & !exit_poll & size > 750 & dias_trabajo > 1) |> 
  select(-exit_poll)
```

# 4. Preguntas {#preguntas}

------------------------------------------------------------------------

## Índice

4.  [Preguntas](#preguntas)

    4.1. [Pregunta 1](#pregunta1)

    4.2. [Pregunta 2](#pregunta2)

    4.3. [Pregunta 3](#pregunta3)

    4.4. [Pregunta 4](#pregunta4)

    4.5. [Pregunta 5](#pregunta5)

------------------------------------------------------------------------

## Índice

4.  [Preguntas](#preguntas)

    4.6. [Pregunta 6](#pregunta6)

    4.7. [Pregunta 7](#pregunta7)

    4.8. [Pregunta 8](#pregunta8)

    4.9. [Pregunta 9](#pregunta9)

    4.10. [Pregunta 10](#pregunta10)

    4.11. [Pregunta 11](#pregunta11)

------------------------------------------------------------------------

## ¿Cómo se reparte el voto de partidos de ámbito nacional (PSOE, PP, VOX, CS, MP, UP - IU) frente a los partidos de corte autonómico o nacionalista? {#pregunta1}

------------------------------------------------------------------------

Primero, añadimos el número y porcentaje de votos obtenido por cada partido en cada municipio y elección.

```{r}
datos_elecciones_tidy <- datos_elecciones_tidy |>
  mutate(votos = sum(votos), .by = c(fecha, id_mun, siglas_comun)) |> 
  distinct(fecha, id_mun, siglas_comun, .keep_all = TRUE) |>
  mutate(porc_voto = (votos / (votos_candidaturas + votos_blancos)) * 100,
         .by = c(fecha, id_mun))
```

Luego, definimos los partidos de ámbito nacional y los de ámbito autonómico o nacionalista.

```{r}
#| code-fold: true

partidos_nacionales <- c("PSOE", "PP", "VOX", "CS", "MP", "UP-IU")

datos_elecciones_tidy <- 
 datos_elecciones_tidy |> 
 mutate(group = if_else(siglas_comun %in% partidos_nacionales, "Nacionales",
                        if_else(siglas_comun == "OTROS", 
                                "OTROS", "Autonómicos/Nacionalistas"))) |>
  mutate(group = forcats::fct_relevel(group, "Nacionales", "Autonómicos/Nacionalistas", "OTROS"))
```

------------------------------------------------------------------------

Además, fijamos un tema base que será utilizado en muchos de los gráficos.

```{r}
theme_set(theme_minimal())

font_add_google(name = "Fira Sans Condensed")
showtext_auto()

theme_update(
  plot.title =
    element_text(size = 24, face = "bold", hjust = 0.5, family = "Fira Sans Condensed"),
  plot.subtitle = element_text(size = 16, family = "Fira Sans Condensed"),
  plot.caption = element_text(size = 12, family = "Fira Sans Condensed"),
  panel.grid.major = element_line(linewidth = 0.1),
  axis.text = element_text(size = 12, family = "Fira Sans Condensed"),
  axis.title = element_text(size = 16, family = "Fira Sans Condensed"),
  axis.text.y = element_blank(),
  legend.position = "bottom",
  legend.text = element_text (size = 10, family = "Fira Sans Condensed"))
```

------------------------------------------------------------------------

Finalmente, creamos el gráfico.

```{r}
#| code-fold: true
#| fig.align: 'center'

datos_elecciones_tidy |> 
  filter(group != "OTROS") |>
  summarise(porc_total = sum(porc_voto), .by = c(group, fecha, id_mun)) |>
  ggplot() +
  ggridges::geom_density_ridges(aes(x = porc_total, y = group,
                                    fill = group, color = group),
                                alpha = 0.7) +
  scale_fill_manual(values = c("Nacionales" = "#1f77b4", "Autonómicos/Nacionalistas" = "#d62728")) +
  scale_color_manual(values = c("Nacionales" = "#1f77b4", "Autonómicos/Nacionalistas" = "#d62728")) +
  labs(title = "Distribución del Porcentaje Total de Votos por Municipio",
       y = "", 
       x = "Porcentaje total", 
       fill = "Tipo de partido",
       color = "Tipo de partido",
       caption = "A. Moreno-Ribera \n P. Villoslada-Blanco") +
  facet_wrap(~fecha)
```

------------------------------------------------------------------------

Cantidad de veces, por municipio, que han superado en porcentaje de voto los partidos nacionalistas y autonómicos en conjunto a los partidos nacionales a lo largo de las 6 elecciones.

```{r}
#| code-fold: true

datos_elecciones_tidy |> 
  summarise(porc_total = sum(porc_voto), .by = c(group, fecha, id_mun, municipio, codigo_provincia)) |> 
  mutate(posicion_grupo = rank(-porc_total), .by = c(fecha, id_mun)) |> 
  filter(group == "Autonómicos/Nacionalistas" & posicion_grupo == 1) |> 
  count(codigo_provincia, sort = TRUE) |> 
  left_join(cod_ccaa_provincias, by = c("codigo_provincia" = "CPRO")) |> 
  select(-c(codigo_provincia, CODAUTO))
```

------------------------------------------------------------------------

Separado por elecciones:

```{r}
datos_elecciones_tidy |> 
  summarise(porc_total = sum(porc_voto), .by = c(group, fecha, id_mun, municipio, codigo_provincia)) |> 
  mutate(posicion_grupo = rank(-porc_total), .by = c(fecha, id_mun)) |> 
  filter(group == "Autonómicos/Nacionalistas" & posicion_grupo == 1) |> 
  count(fecha, codigo_provincia) |> 
  left_join(cod_ccaa_provincias, by = c("codigo_provincia" = "CPRO")) |> 
  select(-c(codigo_provincia, CODAUTO)) |> 
  arrange(fecha, desc(n))
```

------------------------------------------------------------------------

## ¿Cuál el partido ganador en los municipios de más de 100000 habitantes de censo en cada una de las elecciones? {#pregunta2}

------------------------------------------------------------------------

Primero, preparamos los datos.

```{r}
#| code-fold: true

partido_ganador <- datos_elecciones_tidy |> 
  filter(censo > 100000) |> 
  slice_max(porc_voto, by = c(fecha, id_mun)) |> 
  select(fecha, id_mun, siglas_comun, porc_voto) |> 
  arrange(fecha, id_mun)

partido_ganador_2008_03 <- partido_ganador |> 
  filter(fecha == "2008-03")
partido_ganador_2011_11 <- partido_ganador |> 
  filter(fecha == "2011-11")
partido_ganador_2015_12 <- partido_ganador |>
  filter(fecha == "2015-12")
partido_ganador_2016_06 <- partido_ganador |>
  filter(fecha == "2016-06")
partido_ganador_2019_04 <- partido_ganador |>
  filter(fecha == "2019-04")
partido_ganador <- partido_ganador |>
  filter(fecha == "2019-11")
```

Los datos de los municipios se pueden descargar de la web del [CNIG](http://centrodedescargas.cnig.es/CentroDescargas/documentos/atom/au/lineas_limite_gml.zip).

```{r}
#| message: false
#| warning: false
#| code-fold: true

tpm <- capture.output(municipios <- st_read("./datos/lineas_limite/SHP_ETRS89/recintos_municipales_inspire_peninbal_etrs89/recintos_municipales_inspire_peninbal_etrs89.shp"))
rm(tmp)

municipios <- municipios |> 
  mutate(id_mun = str_replace_all(NATCODE, "(..)(..)(..)(..)(...)", "\\2-\\4-\\5"))

municipios_2008_03 <- municipios |> 
  left_join(partido_ganador_2008_03, by = c("id_mun" = "id_mun"))
municipios_2011_11 <- municipios |>
  left_join(partido_ganador_2011_11, by = c("id_mun" = "id_mun"))
municipios_2015_12 <- municipios |>
  left_join(partido_ganador_2015_12, by = c("id_mun" = "id_mun"))
municipios_2016_06 <- municipios |>
  left_join(partido_ganador_2016_06, by = c("id_mun" = "id_mun"))
municipios_2019_04 <- municipios |>
  left_join(partido_ganador_2019_04, by = c("id_mun" = "id_mun"))
municipios_2019_11 <- municipios |>
  left_join(partido_ganador, by = c("id_mun" = "id_mun"))
```

Luego, creamos un mapa para cada elección.

```{r}
#| code-fold: true

partidos_leyenda <- data.frame(
    siglas_comun = factor(c("PP", "PSOE", "CIU", "UP-IU", "ERC"), 
                          levels = c("PP", "PSOE", "CIU", "UP-IU", "ERC"))
)

mapa_2008_03 <- ggplot(municipios_2008_03 |> 
                         mutate(siglas_comun = factor(siglas_comun, levels = c("PP", "PSOE", "CIU", "UP-IU", "ERC")))) +
  geom_sf(aes(fill = siglas_comun), color = "grey20") +
  geom_blank(data = partidos_leyenda, aes(fill = siglas_comun)) +
  scale_fill_manual(values = c("PP" = "#1f77b4", "PSOE" = "#d62728",
                               "CIU" = "#1c3687", "UP-IU" = "#7D3C98", "ERC" = "#FFD700")) +
  labs(title = "2008-03",
       fill = "Partido ganador") +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks =  element_blank(),
    axis.title = element_blank(),
    panel.border = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  )

mapa_2011_11 <- ggplot(municipios_2011_11 |> 
                         mutate(siglas_comun = factor(siglas_comun, levels = c("PP", "PSOE", "CIU", "UP-IU", "ERC")))) +
  geom_sf(aes(fill = siglas_comun), color = "grey20") +
  scale_fill_manual(values = c("PP" = "#1f77b4", "PSOE" = "#d62728",
                               "CIU" = "#1c3687", "UP-IU" = "#7D3C98", "ERC" = "#FFD700")) +
  labs(title = "2011-11") +
  guides(fill = "none") +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks =  element_blank(),
    axis.title = element_blank(),
    panel.border = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  )

mapa_2015_12 <- ggplot(municipios_2015_12 |> 
                         mutate(siglas_comun = factor(siglas_comun, levels = c("PP", "PSOE", "CIU", "UP-IU", "ERC")))) +
  geom_sf(aes(fill = siglas_comun), color = "grey20") +
  scale_fill_manual(values = c("PP" = "#1f77b4", "PSOE" = "#d62728",
                               "CIU" = "#1c3687", "UP-IU" = "#7D3C98", "ERC" = "#FFD700")) +
  labs(title = "2015-12") +
  guides(fill = "none") +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks =  element_blank(),
    axis.title = element_blank(),
    panel.border = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  )

mapa_2016_06 <- ggplot(municipios_2016_06 |> 
                         mutate(siglas_comun = factor(siglas_comun, levels = c("PP", "PSOE", "CIU", "UP-IU", "ERC")))) +
  geom_sf(aes(fill = siglas_comun), color = "grey20") +
  scale_fill_manual(values = c("PP" = "#1f77b4", "PSOE" = "#d62728",
                               "CIU" = "#1c3687", "UP-IU" = "#7D3C98", "ERC" = "#FFD700")) +
  labs(title = "2016-06") +
  guides(fill = "none") +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks =  element_blank(),
    axis.title = element_blank(),
    panel.border = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  )

mapa_2019_04 <- ggplot(municipios_2019_04 |> 
                         mutate(siglas_comun = factor(siglas_comun, levels = c("PP", "PSOE", "CIU", "UP-IU", "ERC")))) +
  geom_sf(aes(fill = siglas_comun), color = "grey20") +
  scale_fill_manual(values = c("PP" = "#1f77b4", "PSOE" = "#d62728",
                               "CIU" = "#1c3687", "UP-IU" = "#7D3C98", "ERC" = "#FFD700")) +
  labs(title = "2019-04") +
  guides(fill = "none") +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks =  element_blank(),
    axis.title = element_blank(),
    panel.border = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  )

mapa_2019_11 <- ggplot(municipios_2019_11 |> 
                         mutate(siglas_comun = factor(siglas_comun, levels = c("PP", "PSOE", "CIU", "UP-IU", "ERC")))) +
  geom_sf(aes(fill = siglas_comun), color = "grey20") +
  scale_fill_manual(values = c("PP" = "#1f77b4", "PSOE" = "#d62728",
                               "CIU" = "#1c3687", "UP-IU" = "#7D3C98", "ERC" = "#FFD700")) +
  labs(title = "2019-11") +
  guides(fill = "none") +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks =  element_blank(),
    axis.title = element_blank(),
    panel.border = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  )
```

------------------------------------------------------------------------

Finalmente, unimos todos los mapas en una única figura.

```{r}
#| code-fold: true
#| fig.align: 'center'

mapa_2008_03 + mapa_2011_11 + mapa_2015_12 + 
  mapa_2016_06 + mapa_2019_04 + mapa_2019_11 +
  plot_layout(nrow = 2, ncol = 3, guides = "collect") +
  plot_annotation(title = "Elecciones generales en España",
                  theme = theme(plot.title = element_text(face = "bold", hjust = 0.5))) & theme(legend.position = "bottom")
```

------------------------------------------------------------------------

## ¿Qué partido fue el segundo cuando el primero fue el PSOE? ¿Y cuándo el primero fue el PP? {#pregunta3}

------------------------------------------------------------------------

Primero, creamos una función propia que, dados dos vectores `partidos` y `votos`, proporcione como output las siglas del partido que ocupó la posición `n` en votos, calculando por defecto el más votado (n = 1).

```{r}
#| code-fold: true

n_votado <- function(partidos, votos, n = 1) {
  return(partidos[order(votos, decreasing = TRUE)][n])
}
```

Luego, la aplicamos a los datos de las elecciones.

```{r}
#| code-fold: true

datos_elecciones_tidy <- datos_elecciones_tidy |> 
  mutate(ganador = n_votado(siglas_comun, votos, 1),
         segundo = n_votado(siglas_comun, votos, 2), .by = c(fecha, id_mun))
```

------------------------------------------------------------------------

Finalmente, obtenemos el resultado.

```{r}
#| code-fold: true
#| fig.align: 'center'

colores_partidos <- c(
    "PSOE" = "#e43d32",
    "PP" = "#1D84CE",
    "VOX" = "#61bb46",
    "UP-IU" = "#772b69",
    "CS" = "#EB6109",
    "OTROS" = "#A7A9AC",
    "ERC" = "#FFD700",
    "PNV" = "#009A44",
    "MÁS PAÍS" = "#8DB600",
    "EH-BILDU" = "#000000",
    "BNG" = "#005142",
    "CIU" = "#FFCC00",
    "COMPROMIS" = "#6AB023"
)

datos_elecciones_tidy <- datos_elecciones_tidy |> 
  mutate(ganador = factor(ganador, levels = c("PSOE", "PP", "VOX", "UP-IU", "CS", "OTROS", "ERC", "PNV", "MÁS PAÍS", "EH-BILDU", "BNG", "CIU", "COMPROMIS")),
         segundo = factor(segundo, levels = c("PSOE", "PP", "VOX", "UP-IU", "CS", "OTROS", "ERC", "PNV", "MÁS PAÍS", "EH-BILDU", "BNG", "CIU", "COMPROMIS")))

conteo <- datos_elecciones_tidy |> 
  filter(ganador == "PP" | ganador == "PSOE") |>
  count(ganador, segundo) |> 
  rename(pp_psoe = ganador)

datos_elecciones_tidy |> 
  filter(ganador == "PP" | ganador == "PSOE") |>
  drop_na(segundo) |>
  mutate(pp_psoe = ifelse(ganador == "PP", "PP", "PSOE")) |> 
  ggplot() +
  geom_bar(aes(x = fecha, fill = segundo), position = "dodge", alpha = 0.8) +
  scale_fill_manual(values = colores_partidos) +
  labs(title = "Número de veces que un partido queda \nsegundo cuando el PP o el PSOE ganan",
       x = "Elecciones",
       y = "",
       fill = "Partido") +
  theme(plot.title = element_text(hjust = 0.5, face = "bold"),
        legend.position = "bottom",
        strip.text = element_text(face = "bold")) +
  facet_wrap(~pp_psoe, ncol = 1)
```

------------------------------------------------------------------------

## ¿En qué municipios de más 2000 habitantes de censo, provincias o autonomías la diferencia entre el ganador y el segundo es más elevada? {#pregunta4}

------------------------------------------------------------------------

Municipios:

```{r}
#| code-fold: true

datos_elecciones_tidy |> 
  filter(censo > 2000) |>
  group_by(fecha, id_mun) |>
  filter(siglas_comun == ganador| siglas_comun == segundo) |>
  arrange(desc(votos), .by_group = TRUE) |>
  ungroup() |>
  mutate(diferencia = votos - lag(votos)) |> 
  slice_tail(n = 1, by = c(fecha, id_mun)) |> 
  group_by(fecha) |> 
  arrange(diferencia, .by_group = TRUE) |> 
  ungroup() |>
  select(fecha, municipio, ganador, segundo, diferencia) |> 
  mutate(diferencia = abs(diferencia))
```

------------------------------------------------------------------------

Provincias:

```{r}
#| code-fold: true

datos_elecciones_tidy |> 
  group_by(fecha, codigo_provincia) |>
  filter(siglas_comun == ganador| siglas_comun == segundo) |>
  arrange(desc(votos), .by_group = TRUE) |>
  ungroup() |>
  mutate(diferencia = votos - lag(votos)) |> 
  slice_tail(n = 1, by = c(fecha, codigo_provincia)) |> 
  group_by(fecha) |> 
  arrange(diferencia, .by_group = TRUE) |> 
  ungroup() |>
  select(fecha, codigo_provincia, ganador, segundo, diferencia) |> 
  mutate(diferencia = abs(diferencia))
```

------------------------------------------------------------------------

Autonomías:

```{r}
#| code-fold: true

datos_elecciones_tidy |> 
  group_by(fecha, codigo_ccaa) |>
  filter(siglas_comun == ganador| siglas_comun == segundo) |>
  arrange(desc(votos), .by_group = TRUE) |>
  ungroup() |>
  mutate(diferencia = votos - lag(votos)) |> 
  slice_tail(n = 1, by = c(fecha, codigo_ccaa)) |> 
  group_by(fecha) |> 
  arrange(diferencia, .by_group = TRUE) |> 
  ungroup() |>
  select(fecha, codigo_ccaa, ganador, segundo, diferencia) |> 
  mutate(diferencia = abs(diferencia))
```

------------------------------------------------------------------------

## ¿Cuáles son los municipios con mayor porcentaje de votos nulos de España? {#pregunta5}

------------------------------------------------------------------------

Primero, añadimos el número y porcentaje de votos nulos en cada municipio y elección.

```{r}
datos_elecciones_tidy_nulos <- datos_elecciones_tidy |> 
  distinct(fecha, id_mun, .keep_all = TRUE) |>
  mutate(porc_voto_nulos = (votos_nulos / (votos_candidaturas + 
                             votos_blancos + votos_nulos)) * 100,
         .by = c(fecha, id_mun))
```

------------------------------------------------------------------------

Luego, obtenemos los resultados.

```{r}
datos_elecciones_tidy_nulos |> 
  slice_max(porc_voto_nulos, by = fecha) |>
  select(fecha, municipio, porc_voto_nulos)
```

------------------------------------------------------------------------

## ¿En qué sitios hay mayor participación? ¿Quién ganó en los sitios con mayor participación y donde menos? ¿A quién le beneficia la baja participación? {#pregunta6}

------------------------------------------------------------------------

Vamos a mostrar los 5 municipios con mayor y menor participación en cada elección.

```{r}
#| code-fold: true
#| fig.align: 'center'

datos_elecciones_tidy |> 
  mutate(participacion = votos_candidaturas + votos_blancos) |> 
  slice_max(porc_voto, by = c(fecha, id_mun)) |> 
  group_by(fecha) |>
  arrange(desc(participacion), .by_group = TRUE) |>
  slice(c(head(row_number(), 5), tail(row_number(), 5))) |> 
  ungroup() |> 
  ggplot() +
  geom_point(aes(x = fct_reorder(id_mun, participacion), y = participacion, color = ganador), alpha = 0.8) +
  scale_color_manual(values = colores_partidos) +
  labs(title = "Los cinco municipios con mayor y menor participación",
       x = "Municipio",
       y = "Participación",
       color = "Ganador") +
  theme(plot.title = element_text(face = "bold", hjust = 0.5),
        axis.text.x = element_text(angle = 30, hjust = 1)) +
  facet_wrap(~fecha, scales = "free_x", ncol = 2)
```

------------------------------------------------------------------------

## ¿Cómo analizar la relación entre censo y voto? ¿Es cierto que ciertos partidos ganan lo rural? {#pregunta7}

------------------------------------------------------------------------

Primero, analizamos la relación entre censo y voto mediante correlación de Pearson.

```{r}
#| code-fold: true
#| fig.align: 'center'

correlaciones <- datos_elecciones_tidy |> 
  slice_max(porc_voto, by = c(fecha, id_mun)) |> 
  group_by(fecha) |> 
  summarize(correlacion = cor(censo, votos, method = "pearson"))

datos_elecciones_tidy |> 
  slice_max(porc_voto, by = c(fecha, id_mun)) |> 
  ggplot() +
  geom_point(aes(x = censo, y = votos, color = ganador), alpha = 0.8) +
  geom_smooth(aes(x = censo, y = votos), method = "lm", color = "black",
              linetype = "dashed", se = FALSE, alpha = 0.5) +
  scale_color_manual(values = colores_partidos) +
  labs(title = "Relación entre censo y voto",
       x = "Censo",
       y = "Votos",
       color = "Ganador") +
  theme(plot.title = element_text(face = "bold", hjust = 0.5)) +
  facet_wrap(~fecha, scales = "free_x", ncol = 2) +
  geom_text(data = correlaciones, aes(label = paste("r = ", round(correlacion, 3), sep = "")),
            x = -Inf, y = Inf, hjust = -0.2, vjust = 1.1)
```

------------------------------------------------------------------------

Despúes, visualizamos el número de veces que los partidos ganan en municipios con un censo inferior a 1000 habitantes (rural) y en aquellos con un censo superior (urbana).

```{r}
#| code-fold: true
#| fig.align: 'center'

datos_elecciones_tidy <- datos_elecciones_tidy |> 
  mutate(tipo_area = if_else(censo < 1000, "Rural", "Urbana"))

datos_elecciones_tidy |> 
  slice_max(porc_voto, by = c(fecha, id_mun)) |> 
  ggplot() +
  geom_bar(aes(x = tipo_area, fill = ganador), position = "dodge", alpha = 0.8) +
  scale_fill_manual(values = colores_partidos) +
  labs(title = "Número de veces que los partidos \nganan en municipios rurales y urbanos",
       x = "Tipo de área",
       y = "Victorias",
       fill = "Ganador") +
  theme(plot.title = element_text(face = "bold", hjust = 0.5),
        legend.position = "bottom")
```

------------------------------------------------------------------------

## ¿Cómo calibrar el error de las encuestas? ¿Cómo visualizarlo? (recuerda que las encuestas son intención de voto a nivel nacional). {#pregunta8}

------------------------------------------------------------------------

Lo primero que hay que hacer es crear una variable que indique a qué elección se refiere cada encuesta.

```{r}
encuestas_tidy <-
  encuestas_tidy |> 
  mutate(fecha = str_sub(date_elec, end = 7), .after = date_elec)
```

------------------------------------------------------------------------

Sumamos los votos por siglas y por elecciones y la participación total en cada elección.

```{r}
votos <- 
  datos_elecciones_tidy |> 
  summarise(total_votos_candidaturas = sum(votos), 
            .by = c(siglas_comun,fecha))

participacion <- 
  datos_elecciones_tidy |> 
  group_by(fecha) |> 
  distinct(municipio, .keep_all = TRUE) |> 
  summarise(total_participacion = sum(votos_candidaturas + votos_blancos))
```

------------------------------------------------------------------------

Unimos la información con los datos de las encuestas.

```{r}
encuestas_error <- 
  votos |> 
  left_join(participacion, by = "fecha") |> 
  mutate(porc_voto_real = (total_votos_candidaturas / total_participacion)*100) |>
  right_join(encuestas_tidy, by = c("fecha", "siglas_comun")) |> 
  relocate(intencion_voto, .after = porc_voto_real)
```

El error lo vamos a calcular como la diferencia entre el porcentaje de voto real y el porcentaje de voto estimado.

```{r}
encuestas_error <-
  encuestas_error |>
  mutate(error = Metrics::ae(porc_voto_real,intencion_voto),
         .after = intencion_voto)
```

------------------------------------------------------------------------

## ¿En qué elección se equivocaron más las encuestas? {#pregunta9}

------------------------------------------------------------------------

Calculamos la media de los errores por elecciones.

```{r}
encuestas_error |> 
  drop_na(porc_voto_real, intencion_voto) |> 
  summarise(media_error = mean(error, na.rm = TRUE),
            .by = c(fecha))
```

La elección en la que cometieron más error fue en la de diciembre de 2015.

------------------------------------------------------------------------

## ¿Cómo se equivocaron las encuestas en partidos de ámbito nacional (PSOE, PP, VOX, CS, MP, UP - IU)? {#pregunta10}

------------------------------------------------------------------------

Preparamos los datos y actualizamos el tema.

```{r}
encuestas_error <- encuestas_error |> 
  mutate(siglas_comun = factor(siglas_comun, levels = c("PSOE", "PP", "VOX", "UP-IU", "CS", "OTROS", "ERC", "PNV", "MÁS PAÍS", "EH-BILDU", "BNG", "CIU", "COMPROMIS")))

font_add_google(name = "Montserrat")
showtext_auto()

theme_update(
  plot.title =
    element_text(size = 24, face = "bold", family = "Montserrat"),
  plot.subtitle = element_text(size = 16, family = "Montserrat"),
  plot.caption = element_text(size = 12, family = "Montserrat"),
  panel.grid.major = element_line(linewidth = 0.1),
  axis.text = element_text(size = 12),
  axis.title = element_text(size = 16),
  legend.position = "bottom",
  legend.title = element_blank(),
  legend.text = element_text (size = 10))
```

------------------------------------------------------------------------

```{r}
#| warning: false
#| code-fold: true
#| fig.align: 'center'

graf <- encuestas_error |> 
  filter(siglas_comun %in% partidos_nacionales) |>
  mutate(error = intencion_voto - porc_voto_real) |> 
  ggplot() +
  aes(x = siglas_comun, y = error, 
      color = siglas_comun) +
  geom_violin(aes(fill = siglas_comun),
                       alpha = 0.65) + 
  geom_boxplot(width = 0.4, alpha = 0, outlier.alpha = 0) +
  geom_point(aes(text = glue("Partido: {siglas_comun} \n %Voto: {round(porc_voto_real,1)} \n Intencion voto: {intencion_voto} \n Error: {round(error,1)} \n Encuestadora: {pollster}"))) +
  scale_color_manual(values = colores_partidos) + 
  scale_fill_manual(values = colores_partidos) +
  guides(color = "none", fill = "none") + 
  labs(title = "Error cometido en cada partido por las encuestadoras",
       subtitle = "Error = %Intención de voto - %Voto real",
       x = "",
       y = "Error cometido",
       caption = "A. Moreno-Ribera \n P. Villoslada-Blanco") +
  theme(plot.title = element_text(size = 16, face = "bold", family = "Montserrat"),
        plot.subtitle = element_text(size = 14, family = "Montserrat"),
        plot.caption = element_text(size = 8, family = "Montserrat"),
        panel.grid.minor = element_blank(),
        panel.grid.major = element_line(linewidth = 0.1),
        axis.text = element_text(size = 10),
        axis.title = element_text(size = 12),
        legend.position = "bottom",
        legend.title = element_blank(),
        legend.text = element_text(size = 8))

plotly::ggplotly(graf, tooltip = "text")
```

------------------------------------------------------------------------

```{r}
#| fig.align: 'center'

graf + facet_wrap(~fecha)
```

------------------------------------------------------------------------

## ¿Qué casas encuestadores acertaron más y cuales se desviaron más de los resultados? {#pregunta11}

------------------------------------------------------------------------

Las encuestadoras que acertaron más en cada elección.

```{r}
encuestas_error |> 
  summarise(media_error = mean(error, na.rm = TRUE), 
            .by = c(pollster,fecha)) |> 
  slice_min(media_error, n = 1, by = fecha)
```

------------------------------------------------------------------------

Las encuestadoras que se desviaron más en cada elección.

```{r}
encuestas_error |> 
  summarise(media_error = mean(error, na.rm = TRUE), 
            .by = c(pollster,fecha)) |> 
  slice_max(media_error, n = 1, by = fecha)
```

::: {style="text-align: center;"}
# Entrega grupal

**Software para gestión de bases de datos**

[**Autores:** <a href="https://www.linkedin.com/in/almudena-moreno-ribera-5b1389233?lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_contact_details%3BJxW49sp%2BS8WrZmgJWFAGSQ%3D%3D" target="_blank">Almudena Moreno-Ribera</a> y <a href="https://www.linkedin.com/in/pablo-villoslada-blanco-5a4b2316a?lipi=urn%3Ali%3Apage%3Ad_flagship3_profile_view_base_contact_details%3B%2BykJQkDhTvqHG%2Bh5Ya24zA%3D%3D" target="_blank">Pablo Villoslada-Blanco</a>]{style="font-size: 20px;"}

<img src="./datos/imagen.png" style="max-width: 33%; height: auto; margin-top: 20px;"/>

[**Máster Universitario en Bioestadística, Universidad Complutense de Madrid (UCM), curso 2023/24**]{style="font-size: 15px;"}

::: {style="position: absolute; bottom: -30px; right: -570px;"}
<a href="https://github.com/pavillos/Entrega_grupal_SPGDBD" target="_blank"> <img src="./datos/github.png" alt="GitHub" style="max-width: 10%;"/> </a>
:::
:::
